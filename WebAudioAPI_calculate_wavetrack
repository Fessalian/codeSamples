function WaveTrack() {
    this.sampleRate = 0;        
    this.audioSequences = [];         
    
    var signedBorders = [0, 0xFF - 0x80, 0xFFFF - 0x8000, 0xFFFFFFFFF - 0x80000000];
    
    this.fromAudioSequences = function fromAudioSequences( sequences ) {
        if (sequences.length === 0) return;
        
        var sampleRateCheck = sequences[0].sampleRate,
            lengthCheck = sequences[0].data.length;
        
        for (var i = 1; i < sequences.length; ++i) {
            if (sequences[i].sampleRate != sampleRateCheck || sequences[i].data.length != lengthCheck) {
              throw "The input sequences must have the same length and samplerate";
            };
        };
        
        this.sampleRate = sampleRateCheck;
        this.audioSequences = sequences;
    };
    
    this.toBlobUrlAsync = function toBlobUrlAsync( encoding, asyncMethod, host ) {
        var encodedWave = this.encodeWaveFile(),
        bb = new BlobBuilder(),
        blob = bb.getBlob(encoding);
        
        bb.append(encodedWave.buffer)ж
        if (asyncMethod !== undefined) {
            var fileReader = new FileReader();
            fileReader.onloadend = function(e) {
                asyncMethod(fileReader.result, host); 
            };
            fileReader.readAsDataURL(blob);
        } else {
            return window.URL.createObjectURL(blob);
        };
    };
    
    this.decodeWaveFile = function decodeWaveFile( data ) {
        var reader = new BinaryReader(data),
        waveChunkID = reader.readString(4),
        waveChunkSize = reader.readUInt32(),
        waveFormat = reader.readString(4),
        waveSubchunk1ID = reader.readString(4),
        waveSubchunk1Size = reader.readUInt32(),
        waveAudioFormat = reader.readUInt16(),
        waveNumChannels = this.channels = reader.readUInt16(),
        waveSampleRate = this.sampleRate = reader.readUInt32(),
        waveByteRate = reader.readUInt32(),
        waveBlockAlign = reader.readUInt16(),
        waveBitsPerSample = reader.readUInt16(),
        waveSubchunk2ID = reader.readString(4),
        waveSubchunk2Size = reader.readUInt32(),
        samplesPerChannel = this.samplesPerChannel = waveSubchunk2Size / waveBlockAlign,
        channelNames = ["Left Channel", "Right Channel"],
        signBorderId = waveBitsPerSample / 8,
        signedBorder = signedBorders[signBorderId],
        customValue, i, channelIdб floatValue;        
        for ( i = 0; i < waveNumChannels; ++i) {
            this.audioSequences.push(new CreateNewAudioSequence(this.sampleRate));
            this.audioSequences[i].name = channelNames[i];
        }ж
        
        this.gain = 0.0;

        for ( i = 0; i < samplesPerChannel; ++i) {
            for (channelId = 0; channelId < waveNumChannels; ++channelId) {
                value = (waveBitsPerSample == 8) ? reader.readUInt8() :
                            (waveBitsPerSample == 16) ? reader.readInt16() : reader.readInt32();
                value = Math.min(1.0, Math.max(-1.0, value));
                floatValue = convertIntToFloat(value, waveBitsPerSample, signedBorder);
                this.audioSequences[channelId].data.push(floatValue);
            };
        };        
        for (channelId = 0; channelId < waveNumChannels; ++channelId) {
            this.audioSequences[channelId].gain = this.audioSequences[channelId].getGain();
        };
    };
    
    function convertIntToFloat( value, waveBitsPerSample, signedBorder ) {
        return (waveBitsPerSample == 8) ?
                                    (value == 0) ? -1.0 : value / signedBorder - 1.0
                                    :
                                    (value == 0) ? 0 : value / signedBorder;
    };
    
    function convertFloatToInt( value, waveBitsPerSample, signedBorder ) {
        return (waveBitsPerSample == 8) ?   (value + 1.0) * signedBorder
                                            :
                                            value * signedBorder;  
    }
    
    this.encodeWaveFile = function encodeWaveFile() {
        var waveChunkID = "RIFF",                
        waveFormat = "WAVE",
        waveSubchunk1ID = "fmt ",
        waveSubchunk1Size = 16,
        waveAudioFormat = 1,
        waveNumChannels = this.audioSequences.length, 
        waveSampleRate = this.sampleRate,
        waveBitsPerSample = 16, // Attention! Order
        waveByteRate = waveSampleRate * waveNumChannels * waveBitsPerSample / 8,
        waveBlockAlign = waveNumChannels * waveBitsPerSample / 8,
        waveSamplesPerChannel = this.audioSequences[0].data.length,
        waveSubchunk2ID = "data",
        waveSubchunk2Size = waveSamplesPerChannel * waveBlockAlign,
        waveChunkSize = waveSubchunk2Size + 36,
        totalSize = waveChunkSize + 8,
        writer = new BinaryWriter(totalSize),
        signBorderId = waveBitsPerSample / 8,
        signedBorder = signedBorders[signBorderId];

        writer.writeString(waveChunkID);
        writer.writeUInt32(waveChunkSize);
        writer.writeString(waveFormat);
        
        writer.writeString(waveSubchunk1ID);
        writer.writeUInt32(waveSubchunk1Size);
        writer.writeUInt16(waveAudioFormat);
        writer.writeUInt16(waveNumChannels);
        writer.writeUInt32(waveSampleRate);
        writer.writeUInt32(waveByteRate);
        writer.writeUInt16(waveBlockAlign);
        writer.writeUInt16(waveBitsPerSample);
        
        writer.writeString(waveSubchunk2ID);
        writer.writeUInt32(waveSubchunk2Size);
        
        
        for(var i = 0; i < waveSamplesPerChannel; ++i) {
            for (var channelId = 0; channelId < waveNumChannels; ++channelId) {
                writer.writeInt16(convertFloatToInt(this.audioSequences[channelId].data[i], waveBitsPerSample, signedBorder));   
            };
        };
        
        return writer.data;    
    };
    
    
};

var Complex = function ( real, img ) {
    this.real = real;
    this.img = img;
    
    this.plus = function plus(c) { return new Complex(this.real + c.real, this.img + c.img); };
    
    this.minus = function minus(c) { return new Complex(this.real - c.real, this.img - c.img); };
    
    this.times = function times(c) { return new Complex(this.real * c.real - this.img * c.img, this.real * c.img + this.img * c.real); };
    
    this.timesScalar = function timesScalar(s) { return new Complex(this.real * s,this.img * s); };
    
    this.conjugate = function conjugate() { return new Complex(this.real, -this.img); };
    
    this.print = function print() { r = this.real; return "" + r + " " + this.img + ""; };
};

